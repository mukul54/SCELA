"""
Functions for cell type annotation based on marker gene expression
"""

import os
import scanpy as sc
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from .config import RESULTS_DIR, VIS_DIR

def annotate_cell_types(adata):
    """
    Annotate cell types based on marker genes and existing annotations
    """
    print("\n=== Annotating Cell Types ===")
    
    # Check if we have leiden clusters already calculated
    if 'leiden' not in adata.obs.columns:
        print("Computing Leiden clusters...")
        # Calculate neighborhood graph
        sc.pp.neighbors(adata, n_neighbors=15)
        # Run Leiden clustering algorithm with various resolutions to find the optimal number of clusters
        sc.tl.leiden(adata, resolution=1.0, key_added='leiden')
        print(f"Generated {len(adata.obs['leiden'].unique())} clusters using Leiden algorithm")
    else:
        print(f"Using existing Leiden clusters. Found {len(adata.obs['leiden'].unique())} clusters")
        
    # Make sure the leiden column is categorical
    if not pd.api.types.is_categorical_dtype(adata.obs['leiden']):
        adata.obs['leiden'] = adata.obs['leiden'].astype('category')
        
    # Use the Leiden clustering as our cell type annotation
    adata.obs['cell_type'] = adata.obs['leiden']
    print(f"Using Leiden clustering as cell type annotation. Found {len(adata.obs['cell_type'].unique())} clusters")
    
    # Print statistics about clusters
    for cluster, count in adata.obs['cell_type'].value_counts().items():
        print(f"  Cluster {cluster}: {count} cells")
        
    # Create a nice display name for the clusters
    adata.obs['cell_type_display'] = 'Cluster ' + adata.obs['leiden']
    
    # Identify marker genes for each cluster
    print("Identifying marker genes for each cluster...")
    if 'rank_genes_groups' not in adata.uns or adata.uns['rank_genes_groups'] is None:
        try:
            # Calculate marker genes for each leiden cluster
            sc.tl.rank_genes_groups(adata, 'leiden', method='wilcoxon')
            print("Successfully identified marker genes for all clusters")
        except Exception as e:
            print(f"Error identifying marker genes: {e}")
        
    # Plot cluster distribution
    plt.figure(figsize=(10, 6))
    adata.obs['leiden'].value_counts().sort_index().plot(kind='bar')
    plt.title('Leiden Cluster Distribution')
    plt.xlabel('Cluster ID')
    plt.ylabel('Number of Cells')
    os.makedirs(VIS_DIR, exist_ok=True)  # Ensure directory exists
    plt.tight_layout()
    plt.savefig(f"{VIS_DIR}/cluster_distribution.pdf")
    plt.close()
    print(f"Saved cluster distribution plot to {VIS_DIR}/cluster_distribution.pdf")
    
    # Make sure we have a UMAP embedding
    if 'X_umap' not in adata.obsm:
        print("Computing UMAP embedding...")
        sc.tl.umap(adata)
        # Plot UMAP with cell types - with improved label spacing
        plt.figure(figsize=(12, 10))  # Larger figure
        # Format category names for display by replacing underscores with spaces
        if cell_type_column in adata.obs:
            # Ensure the column is categorical before accessing .cat
            if not pd.api.types.is_categorical_dtype(adata.obs[cell_type_column]):
                adata.obs[cell_type_column] = adata.obs[cell_type_column].astype('category')
                
            # Get current categories and create a mapping to nicely formatted versions
            categories = adata.obs[cell_type_column].cat.categories
            category_map = {cat: cat.replace('_', ' ').replace('-', ' ').title() for cat in categories}
            
            # Create a temporary column with formatted names for plotting
            temp_col = f"{cell_type_column}_formatted"
            adata.obs[temp_col] = adata.obs[cell_type_column].map(category_map)
            
            # Make sure the new column is categorical with the right categories
            adata.obs[temp_col] = adata.obs[temp_col].astype('category')
            adata.obs[temp_col] = adata.obs[temp_col].cat.reorder_categories([category_map[cat] for cat in categories])
            
            # Plot with the formatted names - enhanced visualization
            sc.pl.umap(adata, color=temp_col, 
                     legend_loc='on data',  # Place legend on data for better visual connection
                     legend_fontweight='bold',
                     legend_fontoutline=2,  # Add outline to legend text for better visibility
                     legend_fontsize=10,  # Slightly larger legend font for better visibility
                     palette='tab20',     # Better color palette for distinguishing cell types
                     title='Cell Types', 
                     frameon=False,       # Remove frame for cleaner visualization
                     s=40,               # Larger point size
                     alpha=0.8,          # Slight transparency to see overlapping points
                     show=False)
            
            # Delete temporary column after plotting
            del adata.obs[temp_col]
        else:
            # Fallback: use the original column
            sc.pl.umap(adata, color=cell_type_column, 
                     legend_loc='right',
                     legend_fontsize=8,
                     title='Cell Types', 
                     s=30,
                     show=False)
        
        # Get current axes and adjust
        ax = plt.gca()
        ax.set_title('Cell Types UMAP', fontsize=14, pad=20)  # Add more padding to title
        
        cell_types_umap_file = f"{VIS_DIR}/cell_types_umap.pdf"
        plt.savefig(cell_types_umap_file, bbox_inches='tight', dpi=150)
        plt.close()
        print(f"Saved cell types UMAP to {cell_types_umap_file}")
    
    return adata
